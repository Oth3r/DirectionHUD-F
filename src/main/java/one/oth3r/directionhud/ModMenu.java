package one.oth3r.directionhud;

import dev.isxander.yacl.api.*;
import dev.isxander.yacl.gui.controllers.ColorController;
import dev.isxander.yacl.gui.controllers.TickBoxController;
import dev.isxander.yacl.gui.controllers.slider.IntegerSliderController;
import dev.isxander.yacl.gui.controllers.string.StringController;
import dev.isxander.yacl.gui.controllers.string.number.IntegerFieldController;
import one.oth3r.directionhud.files.config;
import com.terraformersmc.modmenu.api.ConfigScreenFactory;
import com.terraformersmc.modmenu.api.ModMenuApi;

import net.minecraft.text.Text;
import one.oth3r.directionhud.utils.CUtl;
import one.oth3r.directionhud.utils.Utl;

import java.awt.*;
import java.util.List;

public class ModMenu implements ModMenuApi {
    @Override
    public ConfigScreenFactory<?> getModConfigScreenFactory() {
        return parent -> YetAnotherConfigLib.createBuilder().save(config::save)
                .title(Text.of("DirectionHUD"))
                .category(ConfigCategory.createBuilder()
                        .name(CUtl.lang("config"))
                        .tooltip(CUtl.lang("config_info"))
                        .option(Option.createBuilder(boolean.class)
                                .name(CUtl.lang("config.dest_saving"))
                                .tooltip(CUtl.lang("config.dest_saving.info"))
                                .binding(config.defaults.DESTSaving, () -> config.DESTSaving, n -> config.DESTSaving = n)
                                .controller(TickBoxController::new)
                                .build())
                        .option(Option.createBuilder(int.class)
                                .name(CUtl.lang("config.max_saved"))
                                .tooltip(CUtl.lang("config.max_saved.info"))
                                .binding(config.defaults.MAXSaved, () -> config.MAXSaved, n -> config.MAXSaved = n)
                                .controller(IntegerFieldController::new)
                                .build())
                        .option(Option.createBuilder(boolean.class)
                                .name(CUtl.lang("config.death_saving"))
                                .tooltip(CUtl.lang("config.death_saving.info"))
                                .binding(config.defaults.deathsaving, () -> config.deathsaving, n -> config.deathsaving = n)
                                .controller(TickBoxController::new)
                                .build())
                        .option(Option.createBuilder(boolean.class)
                                .name(CUtl.lang("config.hud_editing"))
                                .tooltip(CUtl.lang("config.hud_editing.info"))
                                .binding(config.defaults.HUDEditing, () -> config.HUDEditing, n -> config.HUDEditing = n)
                                .controller(TickBoxController::new)
                                .build())
                        .option(Option.createBuilder(int.class)
                                .name(CUtl.lang("config.hud_refresh"))
                                .tooltip(CUtl.lang("config.hud_refresh.info"))
                                .binding(config.defaults.HUDRefresh, () -> config.HUDRefresh, n -> config.HUDRefresh = n)
                                .controller(integerOption -> new IntegerSliderController(integerOption,1,20,1))
                                .build())
                        .option(Option.createBuilder(boolean.class)
                                .name(CUtl.lang("config.online_mode"))
                                .tooltip(CUtl.lang("config.online_mode.info"))
                                .binding(config.defaults.online, () -> config.online, n -> config.online = n)
                                .controller(TickBoxController::new)
                                .build())
                        .build())
                .category(ConfigCategory.createBuilder()
                        .name(CUtl.lang("config.hud"))
                        .tooltip(CUtl.lang("config.hud_info"))
                        .option(Option.createBuilder(boolean.class)
                                .name(CUtl.lang("config.hud.enabled"))
                                .binding(config.defaults.HUDEnabled, () -> config.HUDEnabled, n -> config.HUDEnabled = n)
                                .controller(TickBoxController::new)
                                .build())
                        .option(ListOption.createBuilder(String.class)
                                .name(CUtl.lang("config.hud.order"))
                                .binding(List.of(config.defaults.HUDOrder.split(" ")),
                                        () -> List.of(config.HUDOrder.split(" ")), n -> config.HUDOrder = String.join(" ", n))
                                .controller(StringController::new)
                                .initial("")
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(CUtl.lang("config.hud.module"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("hud.module.coordinates"))
                                        .binding(config.defaults.HUDCoordinates, () -> config.HUDCoordinates, n -> config.HUDCoordinates = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("hud.module.destination"))
                                        .binding(config.defaults.HUDDestination, () -> config.HUDDestination, n -> config.HUDDestination = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("hud.module.distance"))
                                        .binding(config.defaults.HUDDistance, () -> config.HUDDistance, n -> config.HUDDistance = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("hud.module.compass"))
                                        .binding(config.defaults.HUDCompass, () -> config.HUDCompass, n -> config.HUDCompass = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("hud.module.direction"))
                                        .binding(config.defaults.HUDDirection, () -> config.HUDDirection, n -> config.HUDDirection = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("hud.module.time"))
                                        .binding(config.defaults.HUDTime, () -> config.HUDTime, n -> config.HUDTime = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("hud.module.weather"))
                                        .binding(config.defaults.HUDWeather, () -> config.HUDWeather, n -> config.HUDWeather = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(CUtl.lang("config.hud.color_pri"))
                                .option(Option.createBuilder(Color.class)
                                        .name(CUtl.lang("config.hud.color"))
                                        .binding(Utl.color.toColor(config.defaults.HUDPrimaryColor),
                                                () -> Utl.color.toColor(config.HUDPrimaryColor),
                                                n -> config.HUDPrimaryColor = String.format("#%02x%02x%02x", n.getRed(), n.getGreen(), n.getBlue()))
                                        .controller(ColorController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("config.hud.color.bold"))
                                        .binding(config.defaults.HUDPrimaryBold, () -> config.HUDPrimaryBold, n -> config.HUDPrimaryBold = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("config.hud.color.italics"))
                                        .binding(config.defaults.HUDPrimaryItalics, () -> config.HUDPrimaryItalics, n -> config.HUDPrimaryItalics = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("config.hud.color.rainbow"))
                                        .binding(config.defaults.HUDPrimaryRainbow, () -> config.HUDPrimaryRainbow, n -> config.HUDPrimaryRainbow = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(CUtl.lang("config.hud.color_sec"))
                                .option(Option.createBuilder(Color.class)
                                        .name(CUtl.lang("config.hud.color"))
                                        .binding(Utl.color.toColor(config.defaults.HUDSecondaryColor),
                                                () -> Utl.color.toColor(config.HUDSecondaryColor),
                                                n -> config.HUDSecondaryColor = String.format("#%02x%02x%02x", n.getRed(), n.getGreen(), n.getBlue()))
                                        .controller(ColorController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("config.hud.color.bold"))
                                        .binding(config.defaults.HUDSecondaryBold, () -> config.HUDSecondaryBold, n -> config.HUDSecondaryBold = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("config.hud.color.italics"))
                                        .binding(config.defaults.HUDSecondaryItalics, () -> config.HUDSecondaryItalics, n -> config.HUDSecondaryItalics = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("config.hud.color.rainbow"))
                                        .binding(config.defaults.HUDSecondaryRainbow, () -> config.HUDSecondaryRainbow, n -> config.HUDSecondaryRainbow = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .build())
                        .build())
                .category(ConfigCategory.createBuilder()
                        .name(CUtl.lang("config.dest"))
                        .tooltip(CUtl.lang("config.dest_info"))
                        .group(OptionGroup.createBuilder()
                                .name(CUtl.lang("dest.setting.destination"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("dest.setting.autoclear"))
                                        .binding(config.defaults.DESTAutoClear, () -> config.DESTAutoClear, n -> config.DESTAutoClear = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(int.class)
                                        .name(CUtl.lang("config.dest.autoclear_rad"))
                                        .binding(config.defaults.DESTAutoClearRad, () -> config.DESTAutoClearRad, n -> config.DESTAutoClearRad = n)
                                        .controller(option -> new IntegerSliderController(option, 1, 15, 1))
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("dest.setting.ylevel"))
                                        .binding(config.defaults.DESTYLevel, () -> config.DESTYLevel, n -> config.DESTYLevel = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(CUtl.lang("dest.setting.particle"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("config.dest.particle.line"))
                                        .binding(config.defaults.DESTLineParticles, () -> config.DESTLineParticles, n -> config.DESTLineParticles = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(Color.class)
                                        .name(CUtl.lang("config.dest.particle.line_c"))
                                        .binding(Utl.color.toColor(config.defaults.DESTLineParticleColor),
                                                () -> Utl.color.toColor(config.DESTLineParticleColor),
                                                n -> config.DESTLineParticleColor = String.format("#%02x%02x%02x", n.getRed(), n.getGreen(), n.getBlue()))
                                        .controller(ColorController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("config.dest.particle.line"))
                                        .binding(config.defaults.DESTDestParticles, () -> config.DESTDestParticles, n -> config.DESTDestParticles = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(Color.class)
                                        .name(CUtl.lang("config.dest.particle.dest_c"))
                                        .binding(Utl.color.toColor(config.defaults.DESTDestParticleColor),
                                                () -> Utl.color.toColor(config.DESTDestParticleColor),
                                                n -> config.DESTDestParticleColor = String.format("#%02x%02x%02x", n.getRed(), n.getGreen(), n.getBlue()))
                                        .controller(ColorController::new)
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(CUtl.lang("dest.setting.features"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("dest.setting.send"))
                                        .binding(config.defaults.DESTSend, () -> config.DESTSend, n -> config.DESTSend = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("dest.setting.track"))
                                        .binding(config.defaults.DESTTrack, () -> config.DESTTrack, n -> config.DESTTrack = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(CUtl.lang("dest.setting.lastdeath"))
                                        .binding(config.defaults.DESTLastdeath, () -> config.DESTLastdeath, n -> config.DESTLastdeath = n)
                                        .controller(TickBoxController::new)
                                        .build())
                                .build())
                        .build())
                .build().generateScreen(parent);
    }
}
